// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/types/generated/zod"
  createInputTypes = false
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  nickname          String          @default("")
  residence         String          @default("")
  introduction      String          @default("")
  twitterUsername   String          @default("")
  instagramUsername String          @default("")
  musicLink         String          @default("")
  podcastLink       String          @default("")
  websiteLink       String          @default("")
  tags              UserOnUserTag[]
  Onboarding        Onboarding[]
  myBestSongs       MyBestSong[]
  UserOnBand        UserOnBand[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserTag {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  name      String
  users     UserOnUserTag[]

  @@unique([name])
}

model UserOnUserTag {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userTagId String
  userTag   UserTag @relation(fields: [userTagId], references: [id], onDelete: Cascade)

  @@id([userId, userTagId])
}

enum OnboardingStep {
  VIEW_MY_PROFILE
}

model Onboarding {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  userId    String
  step      OnboardingStep
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, step])
}

enum SongType {
  track
  album
}

model MyBestSong {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spotifyId String   @default("")
  type      SongType
  artist    String   @default("")
  name      String
  order     Int      @default(0)
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  dateFrom    DateTime
  dateTo      DateTime
  image       String?
  movie       String?
  driveLink   String?
  Band        Band[]
}

model Band {
  id          String       @id @default(cuid())
  eventId     String?
  event       Event?       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  liveOrder   Int
  name        String
  description String?
  photo       String?
  image       String?
  typoImage   String?
  movie       String?
  UserOnBand  UserOnBand[]
}

model UserOnBand {
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName String? // User未登録時にuserIdよりも優先的に使用する
  bandId   String
  band     Band    @relation(fields: [bandId], references: [id], onDelete: Cascade)
  order    Int     @default(0)
  part     String?

  @@id([userId, bandId])
}
